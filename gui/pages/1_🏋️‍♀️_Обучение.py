"""
Training page
"""

import os
from time import sleep

import requests
import streamlit as st

from gui.utils import init_page, API_URL, read_dataset

init_page(title="–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", desc="–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")

available_models = requests.get(f"{API_URL}/models").json()

col1, col2 = st.columns(2)

model_to_train = col1.selectbox(
    label="–ú–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
    options=list(available_models.keys()),
    help="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏",
)
hyperparameters = available_models[model_to_train]

col2.write("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
col2.write(hyperparameters)

with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", expanded=True):
    defined_hyperparameters = {
        param: st.text_input(label=param, help=f"–ó–Ω–∞—á–µ–Ω–∏–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param}")
        for param in hyperparameters
    }

cleaned_hyperparameters = {
    param: value for param, value in defined_hyperparameters.items() if value
}

dataset_name = st.selectbox(
    label="–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
    options=list(os.listdir("datasets")),
    help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏",
)

X_train, y_train = read_dataset(dataset_name=dataset_name, data_type="train")

if st.button(
    label="–û–±—É—á–∏—Ç—å",
    help="–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏",
    type="primary",
    use_container_width=True,
):
    with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
        sleep(5)
        response = requests.post(
            f"{API_URL}/train",
            json={
                "model_spec": {
                    "type": model_to_train,
                    "parameters": cleaned_hyperparameters,
                },
                "features": X_train,
                "targets": y_train,
            },
        )

    if response.ok:
        st.success(
            "ID –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: {}".format(response.json().get("model_id")), icon="‚úÖ"
        )
    else:
        st.error(
            "–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {}".format(
                response.json().get("detail", "unknown error")
            ),
            icon="üö®",
        )
